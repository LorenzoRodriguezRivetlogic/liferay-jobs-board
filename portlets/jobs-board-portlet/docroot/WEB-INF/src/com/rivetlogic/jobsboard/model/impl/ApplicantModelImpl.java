/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.jobsboard.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rivetlogic.jobsboard.model.Applicant;
import com.rivetlogic.jobsboard.model.ApplicantModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Applicant service. Represents a row in the &quot;rivetlogic_jobsboard_Applicant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rivetlogic.jobsboard.model.ApplicantModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicantImpl}.
 * </p>
 *
 * @author joseross
 * @see ApplicantImpl
 * @see com.rivetlogic.jobsboard.model.Applicant
 * @see com.rivetlogic.jobsboard.model.ApplicantModel
 * @generated
 */
public class ApplicantModelImpl extends BaseModelImpl<Applicant>
	implements ApplicantModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a applicant model instance should use the {@link com.rivetlogic.jobsboard.model.Applicant} interface instead.
	 */
	public static final String TABLE_NAME = "rivetlogic_jobsboard_Applicant";
	public static final Object[][] TABLE_COLUMNS = {
			{ "applicantId", Types.BIGINT },
			{ "jobId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "cv", Types.BIGINT },
			{ "info", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "notes", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rivetlogic_jobsboard_Applicant (applicantId LONG not null primary key,jobId LONG,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,cv LONG,info VARCHAR(75) null,status VARCHAR(75) null,notes VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rivetlogic_jobsboard_Applicant";
	public static final String ORDER_BY_JPQL = " ORDER BY applicant.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_jobsboard_Applicant.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rivetlogic.jobsboard.model.Applicant"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rivetlogic.jobsboard.model.Applicant"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rivetlogic.jobsboard.model.Applicant"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long JOBID_COLUMN_BITMASK = 4L;
	public static long NAME_COLUMN_BITMASK = 8L;
	public static long STATUS_COLUMN_BITMASK = 16L;
	public static long CREATEDATE_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rivetlogic.jobsboard.model.Applicant"));

	public ApplicantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Applicant.class;
	}

	@Override
	public String getModelClassName() {
		return Applicant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("applicantId", getApplicantId());
		attributes.put("jobId", getJobId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("email", getEmail());
		attributes.put("phone", getPhone());
		attributes.put("cv", getCv());
		attributes.put("info", getInfo());
		attributes.put("status", getStatus());
		attributes.put("notes", getNotes());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long applicantId = (Long)attributes.get("applicantId");

		if (applicantId != null) {
			setApplicantId(applicantId);
		}

		Long jobId = (Long)attributes.get("jobId");

		if (jobId != null) {
			setJobId(jobId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		Long cv = (Long)attributes.get("cv");

		if (cv != null) {
			setCv(cv);
		}

		String info = (String)attributes.get("info");

		if (info != null) {
			setInfo(info);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}
	}

	@Override
	public long getApplicantId() {
		return _applicantId;
	}

	@Override
	public void setApplicantId(long applicantId) {
		_applicantId = applicantId;
	}

	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		_columnBitmask |= JOBID_COLUMN_BITMASK;

		if (!_setOriginalJobId) {
			_setOriginalJobId = true;

			_originalJobId = _jobId;
		}

		_jobId = jobId;
	}

	public long getOriginalJobId() {
		return _originalJobId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@Override
	public long getCv() {
		return _cv;
	}

	@Override
	public void setCv(long cv) {
		_cv = cv;
	}

	@Override
	public String getInfo() {
		if (_info == null) {
			return StringPool.BLANK;
		}
		else {
			return _info;
		}
	}

	@Override
	public void setInfo(String info) {
		_info = info;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Applicant.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Applicant toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Applicant)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicantImpl applicantImpl = new ApplicantImpl();

		applicantImpl.setApplicantId(getApplicantId());
		applicantImpl.setJobId(getJobId());
		applicantImpl.setGroupId(getGroupId());
		applicantImpl.setCompanyId(getCompanyId());
		applicantImpl.setCreateDate(getCreateDate());
		applicantImpl.setModifiedDate(getModifiedDate());
		applicantImpl.setName(getName());
		applicantImpl.setEmail(getEmail());
		applicantImpl.setPhone(getPhone());
		applicantImpl.setCv(getCv());
		applicantImpl.setInfo(getInfo());
		applicantImpl.setStatus(getStatus());
		applicantImpl.setNotes(getNotes());

		applicantImpl.resetOriginalValues();

		return applicantImpl;
	}

	@Override
	public int compareTo(Applicant applicant) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), applicant.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Applicant)) {
			return false;
		}

		Applicant applicant = (Applicant)obj;

		long primaryKey = applicant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ApplicantModelImpl applicantModelImpl = this;

		applicantModelImpl._originalJobId = applicantModelImpl._jobId;

		applicantModelImpl._setOriginalJobId = false;

		applicantModelImpl._originalGroupId = applicantModelImpl._groupId;

		applicantModelImpl._setOriginalGroupId = false;

		applicantModelImpl._originalCompanyId = applicantModelImpl._companyId;

		applicantModelImpl._setOriginalCompanyId = false;

		applicantModelImpl._originalName = applicantModelImpl._name;

		applicantModelImpl._originalStatus = applicantModelImpl._status;

		applicantModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Applicant> toCacheModel() {
		ApplicantCacheModel applicantCacheModel = new ApplicantCacheModel();

		applicantCacheModel.applicantId = getApplicantId();

		applicantCacheModel.jobId = getJobId();

		applicantCacheModel.groupId = getGroupId();

		applicantCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicantCacheModel.createDate = createDate.getTime();
		}
		else {
			applicantCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			applicantCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			applicantCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		applicantCacheModel.name = getName();

		String name = applicantCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			applicantCacheModel.name = null;
		}

		applicantCacheModel.email = getEmail();

		String email = applicantCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			applicantCacheModel.email = null;
		}

		applicantCacheModel.phone = getPhone();

		String phone = applicantCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			applicantCacheModel.phone = null;
		}

		applicantCacheModel.cv = getCv();

		applicantCacheModel.info = getInfo();

		String info = applicantCacheModel.info;

		if ((info != null) && (info.length() == 0)) {
			applicantCacheModel.info = null;
		}

		applicantCacheModel.status = getStatus();

		String status = applicantCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			applicantCacheModel.status = null;
		}

		applicantCacheModel.notes = getNotes();

		String notes = applicantCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			applicantCacheModel.notes = null;
		}

		return applicantCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{applicantId=");
		sb.append(getApplicantId());
		sb.append(", jobId=");
		sb.append(getJobId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", cv=");
		sb.append(getCv());
		sb.append(", info=");
		sb.append(getInfo());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.rivetlogic.jobsboard.model.Applicant");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>applicantId</column-name><column-value><![CDATA[");
		sb.append(getApplicantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cv</column-name><column-value><![CDATA[");
		sb.append(getCv());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>info</column-name><column-value><![CDATA[");
		sb.append(getInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Applicant.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Applicant.class
		};
	private long _applicantId;
	private long _jobId;
	private long _originalJobId;
	private boolean _setOriginalJobId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _originalName;
	private String _email;
	private String _phone;
	private long _cv;
	private String _info;
	private String _status;
	private String _originalStatus;
	private String _notes;
	private long _columnBitmask;
	private Applicant _escapedModel;
}